{"version":3,"sources":["maximize-select2-height.js"],"names":[],"mappingsfile":"select2.min.js","sourcesContent":["// maximize-select2-height v1.0.2\n// (c) Panorama Education 2015\n// MIT License\n// https://github.com/panorama-ed/maximize-select2-height\n\n// This jQuery/Select2 plugin expands a Select2 dropdown to take up as much\n// height as possible given its position on the page and the current viewport\n// size. The plugin correctly handles:\n//   - Dynamic window resizing.\n//   - The effects of scroll bars on the viewport.\n//   - Select2 rendering dropdowns both upwards and downwards.\n\n// NOTE: The original <select> element that is $().select2()'d *must* have a\n// unique ID for this code to work. (Ex: <select id=\"my-unique-id\"></select>)\n\n(function ($) {\n  \"use strict\";\n\n  // We can find these elements now, since the properties we check on them are\n  // all via methods that are recalculated each time.\n  var $window = $(window);\n  var $document = $(document);\n\n  // @param {Object} options The options object passed in when this plugin is\n  //   initialized\n  // @param {Boolean} dropdownDownwards True iff the dropdown is rendered\n  //   downwards (Select2 sometimes renders the options upwards to better fit on\n  //   a page)\n  // @return {Object} The options passed in, combined with defaults. Keys are:\n  //   - cushion: The number of pixels between the edge of the dropdown and the\n  //              edge of the viewable window. [Default: 10, except when a\n  //              horizontal scroll bar would interfere, in which case it's 30.]\n  //              NOTE: If a value is passed in, no adjustments for possible\n  //              scroll bars are made.\n  var settings = function (options, dropdownDownwards) {\n    return $.extend({\n      cushion: (\n        dropdownDownwards && $document.width() > $window.width()\n      ) ? 30 : 10\n    }, options);\n  };\n\n  // @param {String} id The DOM element ID for the original <select> node\n  // @param {jQuery object} $select2Results The DOM element with class\n  //   \"select2-results\"\n  // @param {jQuery object} $grandparent The grandparent object of the\n  //   $select2Results object\n  // @param {Object} options The options object passed in when this plugin is\n  //   initialized\n  // @param {Boolean} dropdownDownwards True iff the dropdown is rendered\n  //   downwards (Select2 sometimes renders the options upwards to better fit on\n  //   a page)\n  // @return {Number} the maximum height of the Select2 results box to display\n  var computeMaxHeight = function (\n    id, $select2Results, $grandparent, options, dropdownDownwards\n  ) {\n    var height;\n    var resultsBoxMiscellaniaHeight;\n    var widgetBoxOffset;\n\n    if (dropdownDownwards) {\n      // When the dropdown appears downwards, the formula is:\n      //   visible window size\n      // + out-of-window pixels we've scrolled past\n      // - size of content (including offscreen content) above results box\n      // ------------------------------------------\n      //   total height available to us\n\n      // innerHeight is more accurate across browsers than $(window).height().\n      height = window.innerHeight +\n               $window.scrollTop() -\n               $select2Results.offset().top;\n    } else {\n      // When the dropdown appears upwards, the formula is:\n      //   vertical position of the widget (clickable) dropdown box\n      // - out-of-window pixels we've scrolled past\n      // - height of the search box and other content above the actual results\n      //   but in the results box\n      // ------------------------------------------\n      //   total height available to us\n\n      // Compute the global vertical offset of the widget box (the one with the\n      // downward arrow that the user clicks on to expose options).\n      widgetBoxOffset = $(\"#select2-\" + id + \"-container\").\n                        parent().parent().parent().offset().top;\n\n      // Compute the height, if any, of search box and other content in the\n      // results box but not part of the results.\n      resultsBoxMiscellaniaHeight = $grandparent.height() -\n                                    $select2Results.height();\n      height = widgetBoxOffset -\n               $window.scrollTop() -\n               resultsBoxMiscellaniaHeight;\n    }\n\n    // Leave a little cushion to prevent the dropdown from\n    // rendering off the edge of the viewport.\n    return height - settings(options, dropdownDownwards).cushion;\n  };\n\n  // Call on a jQuery Select2 element to maximize the height of the dropdown\n  // every time it is opened.\n  // @param {Object} options The options object passed in when this plugin is\n  //   initialized\n  $.fn.maximizeSelect2Height = function (options) {\n    return this.each(function (_, el) {\n      // Each time the Select2 is opened, resize it to take up as much vertical\n      // space as possible given its position and the current viewport size.\n      $(el).on(\"select2:open\", function () {\n        // We have to put this code block inside a timeout because we determine\n        // whether the dropdown is rendered upwards or downwards via a hack that\n        // looks at the CSS classes, and these aren't set until Select2 has a\n        // chance to render the box, which occurs after this event fires.\n\n        // The alternative solution that avoids using a timeout would be to\n        // directly modify the document's stylesheets (instead of the styles for\n        // individual elements), but that is both ugly/dangerous and actually\n        // impossible for us because we need to modify the styles of a parent\n        // node of a given DOM node when the parent has no unique ID, which CSS\n        // doesn't have the ability to do.\n        setTimeout(function () {\n          var $select2Results = $(\"#select2-\" + el.id + \"-results\");\n          var $parent = $select2Results.parent();\n          var $grandparent = $parent.parent();\n          var dropdownDownwards = $grandparent\n                                  .hasClass(\"select2-dropdown--below\");\n\n          var maxHeight = computeMaxHeight(\n            el.id,\n            $select2Results,\n            $grandparent,\n            options,\n            dropdownDownwards\n          );\n\n          // Set the max height of the relevant DOM elements. We use max-height\n          // instead of height directly to correctly handle cases in which there\n          // are only a few elements (we don't want a giant empty dropdown box).\n          $parent.css(\"max-height\", maxHeight);\n          $select2Results.css(\"max-height\", maxHeight);\n\n          // Select2 corrects the positioning of the results box on scroll, so\n          // we trigger that event here to let it auto-correct. This is done for\n          // the case where the dropdown appears upwards; we adjust its max\n          // height but we also want to move it up further, lest it cover up the\n          // initial dropdown box.\n          $(document).trigger(\"scroll\");\n        });\n      });\n    });\n  };\n})(jQuery);\n"]}